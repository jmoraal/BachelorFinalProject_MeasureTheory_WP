{
  "exerciseSheet": false,
  "blocks": [
    {
      "type": "text",
      "text": "# The trivial σ-algebra\nIn this notebook, we will prove that the trivial σ-algebra on some set Ω, the set $\\{Ω,∅\\}$, is indeed a σ-algebra. We start off with two lemmas on the complement of the empty set and of Ω, which we will need during the proof. \nFirst, we prove that the complement of the empty set in Ω is Ω itself:"
    },
    {
      "type": "code",
      "text": "Require Import wplib.Lib.measure_theory.wpn.\n\nLemma complement_empty_is_full : \n  Ω = (Ω \\ ∅). \n\nProof. \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_full. \nIt holds that (x ∈ (Ω \\ ∅)).\n\nTake x : U; Assume x_in_complement_empty.\nIt holds that (x ∈ Ω). \nQed. "
    },
    {
      "type": "text",
      "text": "Analogously, we can prove that the complement of Ω in Ω is the empty set: "
    },
    {
      "type": "code",
      "text": "Lemma complement_full_is_empty : \n  ∅ = (Ω \\ Ω). \n\nProof. \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_empty.\ncontradiction. \n\nTake x : U; Assume x_in_complement_full.\nBecause x_in_complement_full \n  both x_in_full and not_x_in_full. \ncontradiction. \nQed."
    },
    {
      "type": "text",
      "text": "Now, we are ready to prove that $\\{Ω,∅\\}$ is a σ-algebra. For this we need to check three conditions: Ω needs to be in the set, the set must be closed under taking complements and it must be closed under taking the countable union of a collection of sets. "
    },
    {
      "type": "code",
      "text": "Lemma trivial_salgebra : is_σ_algebra empty_and_full. \n\nProof. \nExpand the definition of is_σ_algebra. \nsplit. \n\n(* First point: Prove that Omega is in empty_and_full *)\nIt holds that (full_set_in_set empty_and_full). \nsplit.\n\n(* Second point: Prove that empty_and_full is closed under complement*)\nExpand the definition of complement_in_set. \nTake A : (Ensemble U). \nAssume A_in_F : (A ∈ empty_and_full). \nWrite A_in_F as \n  ((A = Ω) ∨ (A = ∅) ).\nBecause A_in_F either A_is_full or A_is_empty. \nWrite goal using (A = Ω) as \n  ((Ω \\ Ω) ∈ empty_and_full ). \n\n(* now want to apply complement_full_is_empty, but does not work:*)\nBy complement_full_is_empty it holds that ((Ω \\ Ω) = ∅) (comp_full). \nWrite goal using ((Ω \\ Ω) = ∅) as (∅ ∈ empty_and_full). \nIt holds that (∅ ∈ empty_and_full). \n\nWrite goal using (A = ∅) as ((Ω \\ ∅) ∈ empty_and_full). \nBy complement_empty_is_full it holds that ((Ω \\ ∅) = Ω) (comp_empty).\nWrite goal using (Ω \\ ∅ = Ω) as (Ω ∈ empty_and_full). \nIt holds that (Ω ∈ empty_and_full). \n\n(* Third point: Prove that empty_and_full is closed under countable union*)\nExpand the definition of closed_under_countable_union. \nTake C : (ℕ → (Ensemble U)). \nAssume C_n_in_empty_and_full.\nBy classic it holds that ((∀ n : ℕ, (C n) = ∅) \n  ∨ ¬(∀ n : ℕ, (C n) = ∅)) (all_or_not_all_empty). \nBecause all_or_not_all_empty \n  either all_empty or not_all_empty. \n\n(*All empty:*)\nIt suffices to show that (Countable_union C = ∅). \nWe prove equality by proving two inclusions. \n\nTake x : U; Assume x_in_countable_union_C. \nChoose n such that x_in_C_n according to x_in_countable_union_C. \nWrite x_in_C_n using (C n = ∅) as (x ∈ ∅).\nContradiction. \n\nTake x : U; Assume x_in_empty. \nContradiction. \n\n(*Not all empty:*)\nIt suffices to show that (Countable_union C = Ω). \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_countable_union_C. \nChoose n0 such that x_in_C_n0 \n   according to x_in_countable_union_C. \nIt holds that ((C n0 = Ω)\n   ∨ (C n0 = ∅)) (C_n0_empty_or_full). \nBecause C_n0_empty_or_full either C_n0_full or C_n0_empty. \nWrite goal using (Ω = C n0) \n  as (x ∈ C n0). \nApply x_in_C_n0. \nWrite x_in_C_n0 using (C n0 = ∅) \n  as (x ∈ ∅).\nContradiction. \n\nBy not_all_empty it holds that \n  (∃n : ℕ, ¬ (C n = ∅)) (one_not_empty). \nBy C_n_in_empty_and_full it holds that \n  (∃n : ℕ, (C n = Ω)) (one_full).\nChoose n1 such that C_n1_full according to one_full. \nrewrite <- C_n1_full. \nIt holds that ((C n1) ⊂ (Countable_union C)). \nQed."
    }
  ]
}