{
  "exerciseSheet": false,
  "blocks": [
    {
      "type": "text",
      "text": "# Sets & sequences\nIn this document, we state and prove lemmas that have to do with sets, collections of sets and sequences of sets. : \n\n\n## Basic lemmas about sets\nWe start of with some simple statements on relatively simple sets:"
    },
    {
      "type": "code",
      "text": "Require Import wplib.Notations.SetNotations.\nRequire Import wplib.Lib.measure_theory.\nRequire Import Sets.Ensembles.\nRequire Import Sets.Classical_sets.\nRequire Import wplib.Tactics.Tactics.\nRequire Import wplib.Tactics.TacticsContra.\nRequire Import Sets.Powerset.\nRequire Import Logic. \nRequire Import ClassicalFacts. \nRequire Import Omega. \nRequire Import Coq.Arith.Wf_nat. \n\nNotation \"'U'\" := SetNotations.U.\n(*We do not want this, but otherwise notations \n  such as Ω and ∅ do not work. How to fix? *)\n\n\nLemma complement_full_is_empty : \n  ∅ = (Ω \\ Ω). \n\nProof. \nWe prove equality by proving two inclusions. \nTake x : U. \nAssume x_in_empty.\nContradiction. \n\nTake x : U; Assume x_in_complement_full.\nBecause x_in_complement_full \n  both x_in_full and not_x_in_full. \nContradiction. \nQed.\n\n\nLemma setminus_empty : \n  ∀ A : subset U, A \\ ∅ = A. \n\nProof. \nTake A : (subset U). \nWe prove equality by proving two inclusions.\nTake x : U; Assume x_in_A_wo_empty. \nIt holds that (x ∈ A). \n\nTake x : U; Assume x_in_A. \nIt holds that (x ∈ (A \\ ∅)). \nQed. \n\n\nLemma intersection_full : \n  ∀ A : subset U, (Ω ∩ A) = A. \n\nProof. \nTake A : (subset U). \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_intersection. \ndestruct x_in_intersection. \nIt holds that (x ∈ A). \n\nTake x : U; Assume x_in_A. \nIt holds that (x ∈ Ω) (x_in_omega). \nIt follows that (x ∈ (Ω ∩ A)). \nQed. \n\n\nLemma intersection_empty : \n  ∀ A : subset U, (A ∩ ∅) = ∅. \n\nProof. \nTake A : (subset U). \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_intersection. \ndestruct x_in_intersection. \nContradiction. \n\nTake x : U; Assume x_in_empty. \nContradiction. \nQed. \n\n\nLemma empty_disjoint : \n  ∀ A : subset U, Disjoint _ A ∅. \n\nProof. \nTake A : (subset U).\nIt suffices to show that (∀ x:U, x ∉ (A ∩ ∅)).\nTake x : U. \nBy intersection_empty it holds that \n  ((A ∩ ∅) = ∅) (int_empty). \nWrite goal using ((A ∩ ∅) = ∅) as (x ∉ ∅). \nIt holds that (x ∉ ∅). \nQed. \n\nLemma intersection_symmetric : \n  ∀ A B : subset U, A ∩ B = B ∩ A. \n\nProof. \nTake A B : (subset U). \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_AB. \ndestruct x_in_AB. \nIt holds that (x ∈ (B ∩ A)). \n\nTake x : U; Assume x_in_BA. \ndestruct x_in_BA. \nIt holds that (x ∈ (A ∩ B)). \nQed. \n\n\nLemma disjoint_symmetric : \n  ∀ A B : subset U, (Disjoint _ A B) ⇒ (Disjoint _ B A). \n\nProof. \nTake A B : (subset U). \nAssume A_B_disjoint. \ndestruct A_B_disjoint.\nBy intersection_symmetric it holds that \n  ((A ∩ B) = (B ∩ A)) (AB_is_BA).\nWrite H using ((A ∩ B) = (B ∩ A)) \n  as (∀ x : U, x ∉ (B ∩ A)). \nIt follows that (Disjoint U B A). \nQed. \n(*include last two in library? Should be trivial. *)\n\nLemma union_to_or : \n  ∀ A B : (subset U), ∀ x : U, \n    x ∈ (A ∪ B) ⇒ (x ∈ A ∨ x ∈ B).\n\nProof. \nTake A B : (subset U). \nTake x : U; Assume x_in_union. \ndestruct x_in_union. \n(* x ∈ A: *)\nIt follows that (x ∈ A ∨ x ∈ B).\n(* x ∈ B: *) \nIt follows that (x ∈ A ∨ x ∈ B). \nQed. \n\n\nLemma not_in_comp : \n  ∀ A : subset U, ∀ x : U, \n    x ∉ (Ω \\ A) ⇒ x ∈ A.\n\nProof. \nTake A : (subset U); Take x : U. \nAssume x_not_in_complement. \nWe argue by contradiction. \nIt holds that (x ∈ (Ω \\ A)) (x_in_complement).\nContradiction. \nQed. \n\n\nLemma complement_as_intersection : \n  ∀ A B : subset U, \n    A \\ B = (Ω \\ B) ∩ A. \n\nProof. \nTake A B : (subset U). \nWe prove equality by proving two inclusions. \n\nTake x : U. \nAssume x_in_A_without_B. \nIt holds that (x ∈ ((Ω \\ B) ∩ A)). \n\nTake x : U. \nAssume x_in_rhs. \nBy x_in_rhs it holds that \n  (x ∈ (Ω \\ B) ∧ (x ∈ A)) (x_in_A_and_comp_B). \nIt holds that (x ∈ (A \\ B)). \nQed. "
    },
    {
      "type": "text",
      "text": "The following two lemmas should follow immediately, but need to be stated explicitly in order for the proofs ... to work (improvement for library?)"
    },
    {
      "type": "code",
      "text": "Lemma neq_equiv : ∀ x y : ℕ,\n  (x ≠ y) ⇒ ((x < y) ∨ (x > y)).\n\nProof. \nintros x y. omega.\nQed. \n\n\nLemma leq_equiv : ∀ x y : ℕ,\n  (x <= y) ⇒ (x < y ∨ x = y).\n\nProof. \nintros x y. omega. \nQed. \n\n\nLemma geq_equiv : ∀ x y : ℕ,\n  (x ≥ y)%nat ⇒ (x = y ∨ (x > y)%nat).\n\nProof. \nintros x y. omega. \nQed. "
    },
    {
      "type": "text",
      "text": "## Sequences of sets\nNext, we turn to sequences of sets and some of their properties. There are several definitions that we consider in particular. The first takes in two sets $A$ and $B$, turns it into the sequence $(A,B,∅,∅,...)$. Second, we define the finite union of a number of sets from a sequence. \nThis is used in our third definition, which takes in a sequence of sets and turns it into a disjoint sequence of sets with the same union. \nLast, we show some properties of increasing sequences of sets. \n\nAll of these have properties that are often used without proof, but that are more technical and involved than you might expect. "
    },
    {
      "type": "text",
      "text": "### The two-set sequence\nFirst, we show some properties of the sequence $(A,B,∅,∅,...)$ for two sets $A$ and $B$, first in general and then under the condition that they are disjoint. This is an auxiliary sequence that is for example used in the proof that a σ-algebra is not only closed under countable union, but also under finite union; the idea is that the countable union of this sequence is simply $A ∪ B$. The same goes for a λ-system if the two sets are disjoint. \nLater, we will also use the sequence to show that measures are finitely additive. "
    },
    {
      "type": "code",
      "text": "Fixpoint aux_seq (A B : subset U) (n : ℕ) {struct n}\n  : (subset U) :=\n    match n with \n      0 => A \n    | 1 => B\n    | n => ∅ \n    end. \n\n\nLemma CU_aux_is_union : \n  ∀ A B : subset U, Countable_union (aux_seq A B) = A ∪ B. \n\nProof. \nTake A B : (subset U). \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_CU. \nChoose n such that x_in_C_n according to x_in_CU. \nWe prove by induction on n. \nIt holds that (x ∈ (A ∪ B)). \nWe prove by induction on n. \nIt holds that (x ∈ (A ∪ B)). \n\n(* Write x_in_C_n as (x ∈ ∅).  *)\nContradiction. \n\nTake x : U; Assume x_in_intersection. \ndestruct x_in_intersection. \nIt holds that (x ∈ aux_seq A B 0) (x_in_aux0). \nWe need to show that \n  (x ∈ ｛x0 : U | ∃ n : ℕ, x0 ∈ aux_seq A B n｝). \nIt holds that (∃ n : ℕ, x ∈ aux_seq A B n) (exists_n_A). \nIt follows that (x ∈ Countable_union (aux_seq A B)).\n\nIt holds that (x ∈ aux_seq A B 1) (x_in_aux0). \nWe need to show that \n  (x ∈ ｛x0 : U | ∃ n : ℕ, x0 ∈ aux_seq A B n｝). \nIt holds that (∃ n : ℕ, x ∈ aux_seq A B n) (exists_n_B). \nIt follows that (x ∈ Countable_union (aux_seq A B)).\nQed."
    },
    {
      "type": "text",
      "text": "Now follows the proof that the sequence is indeed disjoint. Although it is correct, it is unfortunately not very elegant. "
    },
    {
      "type": "code",
      "text": "Lemma disjoint_aux : \n  ∀ A B : subset U, (Disjoint _ A B) \n    ⇒ (∀ m n : ℕ, m ≠ n ⇒ Disjoint _ (aux_seq A B m) (aux_seq A B n)). \n\nProof. \nTake A B : (subset U). \nAssume A_B_disjoint. \nTake m n : ℕ. \nAssume m_neq_n. \nWe prove by induction on m. \nWe prove by induction on n.\n(*Case m = n = 0:*)\nContradiction. \n(*Case m=0, n=1:*)\nWe prove by induction on n.\nWrite goal using (aux_seq A B 1 = B) as (Disjoint U (aux_seq A B 0) B).\nWrite goal using (aux_seq A B 0 = A) as (Disjoint U A B).\nIt holds that (Disjoint U A B).\n(*Case m=0, n>1*)\nWrite goal using (aux_seq A B (S (S n)) = ∅) \n  as (Disjoint U (aux_seq A B 0) ∅). \nBy empty_disjoint it holds that \n  (Disjoint U (aux_seq A B 0) ∅) (xx). \nApply xx. \n(*Case m =1, n=0: *)\nWe prove by induction on m. \nWe prove by induction on n. \nWrite goal using (aux_seq A B 1 = B) \n  as (Disjoint U B (aux_seq A B 0)).\nWrite goal using (aux_seq A B 0 = A) \n  as (Disjoint U B A).\nBy disjoint_symmetric it holds that \n  ((Disjoint _ B A)) (xx).\nApply xx. \n(*Case m=n=1: *)\nWe prove by induction on n. \nContradiction. \n(*Case m=1, n>1: *)\nWrite goal using (aux_seq A B (S (S n)) = ∅) \n  as (Disjoint U (aux_seq A B 1) ∅). \nBy empty_disjoint it holds that \n  (Disjoint U (aux_seq A B 1) ∅) (xx). \nApply xx.\n(*Case m>n: *)\nWrite goal using (aux_seq A B (S (S m)) = ∅) \n  as (Disjoint U ∅ (aux_seq A B n)). \nBy disjoint_symmetric it holds that \n  (Disjoint U (aux_seq A B n) ∅ \n    ⇒ Disjoint U ∅ (aux_seq A B n)) (disj_symm). \nIt suffices to show that (Disjoint U (aux_seq A B n) ∅). \nApply empty_disjoint. \nQed. "
    },
    {
      "type": "text",
      "text": "One last property we sometimes want to use is that for $n>1$, all elements of our sequence are the empty set (note that Waterproof starts counting at 0):"
    },
    {
      "type": "code",
      "text": "Lemma aux_ge2_empty : \n  ∀ A B : subset U, ∀ n : ℕ, \n    (n > 1)%nat ⇒ aux_seq A B n = ∅. \n\nProof.\nTake A B : (subset U). \n\nTake n : ℕ; Assume n_g_1. \nExpand the definition of aux_seq.\n(*More case distinction than induction, but \n  this works far better for 'Fixpoint' definitions*)\nWe prove by induction on n. \nIt holds that (¬(0 > 1)%nat) (not_0_g_1). \nContradiction.\nWe prove by induction on n. \nIt holds that (¬(1 > 1)%nat) (not_1_g_1). \nContradiction. \nIt holds that (∅ = ∅). \nQed. "
    },
    {
      "type": "text",
      "text": "### On finite unions\nWith the previous lemmas and definitions, we can prove results on countable unions and unions of two sets. There is one category inbetween, which is that of the finite union of a sequence of sets. This is to the countable union what a partial sum is to a series; you can already imagine that it will be helpful at least, possibly inavoidable in several proofs. We now state two definitions, as both have their benefits and drawbacks in different scenarios. (TODO: unify these?)"
    },
    {
      "type": "code",
      "text": "Definition finite_union (C : (ℕ ⇨ subset U)) (n : ℕ) \n  : subset U := \n    ｛x : U | (∃ i : ℕ,  (i <= n ∧ x ∈ (C i)))｝.\n\nDefinition finite_union_up_to (C : (ℕ ⇨ subset U)) (n : ℕ) \n  : (subset U) := \n    ｛x : U | (∃ i : ℕ,  (i < n ∧ x ∈ (C i)))｝."
    },
    {
      "type": "text",
      "text": "We will also see it as an aid when defining our disjoint sequence of sets; to show that this sequence is in a σ-algebra, we need some of the following results. "
    },
    {
      "type": "code",
      "text": "Lemma FU_S_as_union : \n  ∀ C : (ℕ → (subset U)), ∀ n : ℕ,\n    finite_union_up_to C (S n) \n      = (finite_union_up_to C n) ∪ (C n). \n\nProof. \nTake C : (ℕ → (subset U)). \nTake n : ℕ. \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_FU_S. \nChoose n0 such that x_in_C_n0 according to x_in_FU_S.\nIt holds that (n0 <= n) (n0_le_n). (*avoid %nat? *) \nBy leq_equiv it holds that \n  (n0 < n ∨ n0 = n) (n0_l_e_n).\nBecause  n0_l_e_n either n0_l_n or n0_is_n. \n(*n0 < n*)\nIt holds that (x ∈ (finite_union_up_to C n)) (x_in_FU). \nIt holds that (x ∈ (finite_union_up_to C n ∪ C n)). \n(*n0 = n*)\nWrite goal using (n = n0) as \n  (x ∈ (finite_union_up_to C n0 ∪ C n0)). \nIt holds that (x ∈ C n0) (x_in_Cn0).\nIt holds that ( x ∈ (finite_union_up_to C n0 ∪ C n0)). \n\nTake x : U; Assume x_in_FU_with_Cn. \nBy union_to_or it holds that \n  ((x ∈ (finite_union_up_to C n)) ∨ (x ∈ C n)) (x_in_FU_or_Cn).\nIt holds that (x ∈ finite_union_up_to C (S n)). \nQed. "
    },
    {
      "type": "text",
      "text": "\n### The disjoint sequence\nThis definition is, for example, used in the proof that a collection of sets that is both a π-system and a λ-system is also a σ-algebra. (More explanation?)"
    },
    {
      "type": "code",
      "text": "Definition disjoint_seq (C : (ℕ ⇨ subset U)) \n  : (ℕ ⇨ subset U) := \n    fun (n : ℕ) ↦ (C n \\ (finite_union_up_to C n)). "
    },
    {
      "type": "text",
      "text": "That this sequence is disjoint and that the countable union of this sequence is equal to that of the original sequence is proven in `disj_seq_disjoint` and `CU_sets_disjointsets_equal` respectively. First, we prove a smaller result that we will need in these proofs: "
    },
    {
      "type": "code",
      "text": "Lemma FU_up_to_0_empty : \n  ∀ C : (ℕ ⇨ subset U), finite_union_up_to C 0 = ∅. \n\nProof. \nTake C : (ℕ ⇨ subset U). \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_FU_0. \nWrite x_in_FU_0 as \n  (x ∈ ｛x : U | ∃ i : ℕ , i < 0 ∧ x ∈ C i｝). \nIt holds that (¬(∃i : ℕ, i<0 ∧ x ∈ C i)) (no_N_l_0). \nContradiction.\n\nTake x : U; Assume x_in_empty. \nContradiction. \nQed.\n\n\nLemma disj_seq_disjoint : \n  ∀ C : ((ℕ ⇨ subset U)), \n    (∀ m n : ℕ, m ≠ n ⇒ Disjoint _ \n      (disjoint_seq C m) (disjoint_seq C n)). \n\nProof. \nTake C : ((ℕ ⇨ subset U)). \nTake m n : ℕ. \nAssume m_neq_n.\nBy neq_equiv it holds that \n  (m ≠ n ⇒ (m < n) ∨ (m > n)) (m_l_g_n).\nIt holds that ((m < n) ∨ (m > n)) (m_lg_n). \nWe argue by contradiction. \nIt holds that (∃ x : U, \n  x ∈ ((disjoint_seq C m) ∩ (disjoint_seq C n))) (int_not_empty).\nChoose x such that x_in_int according to int_not_empty.\nBy x_in_int it holds that \n  (x ∈ disjoint_seq C m \n    ∧ x ∈ disjoint_seq C n) (x_in_m_and_n). \nBy x_in_m_and_n it holds that \n  (x ∈ disjoint_seq C m) (x_in_m). \nBy x_in_m_and_n it holds that \n  (x ∈ disjoint_seq C n) (x_in_n). \nIt holds that \n  ((x ∉ finite_union_up_to C m) \n    ∧ (x ∉ finite_union_up_to C m)) (x_not_in_FU_mn).\nIt holds that \n  (¬(∃i : ℕ,  (i < m ∧ x ∈ (C i)))\n    ∧ ¬(∃i : ℕ,  (i < n ∧ x ∈ (C i)))) (no_i).\nBecause no_i both no_i_m and no_i_n. \nBecause m_lg_n either m_l_n or m_g_n. \n(* m < n: *)\nBy no_i_m it holds that ((x ∉  C m)) (x_not_in_Cm). \nBy x_in_m it holds that (x ∈ C m) (x_in_Cm).\nContradiction. \n(* m > n: *)\nBy no_i_n it holds that ((x ∉ C n)) (x_not_in_Cn). \nBy x_in_m it holds that (x ∈ C n) (x_in_Cn).\nContradiction.  \nQed. \n\n\nLemma CU_sets_disjointsets_equal : \n  ∀ C : ((ℕ ⇨ subset U)), \n    Countable_union (disjoint_seq C) = Countable_union C.\n\nProof. \nTake C : ((ℕ ⇨ subset U)).\nDefine D := (disjoint_seq C). \nWe prove equality by proving two inclusions. \n\n(* CU disjoint sets in CU C: *)\nTake x : U; Assume x_in_CU_D. \nIt holds that (x ∈ Countable_union C). \n\n(* CU C in CU disjoint sets: *)\nTake x : U; Assume x_in_CU_C. \n(*now choose minimal n such that x is in disj_C n*)\nChoose n such that x_in_C_n according to x_in_CU_C.\nDefine aux_prop := (fun (n : ℕ) ↦ (x ∈ C n)).\nBy classic it holds that \n  (∀ n, aux_prop n ∨ ¬aux_prop n) (aux_prop_decidable). \nBy dec_inh_nat_subset_has_unique_least_element it holds that\n  (has_unique_least_element le aux_prop) (exists_least_n). \nChoose n1 such that x_in_C_minimal_n according to exists_least_n. \n\nIt holds that (x ∈ Countable_union D). \nQed. "
    },
    {
      "type": "text",
      "text": "A similar result to `FU_up_to_0_empty` is the following: "
    },
    {
      "type": "code",
      "text": "Lemma FU_up_to_1_is_0 : \n  ∀ C : (ℕ → (subset U)), \n      finite_union_up_to C 1 = C 0%nat.\n\nProof. \nTake C : (ℕ ⇨ subset U).\nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_FU.\ndestruct x_in_FU. \nIt holds that (x0 = 0%nat) (x0_is_0).\nWrite goal using (0%nat = x0) \n  as (x ∈ C x0). \nIt holds that (x ∈ C x0).\n\nTake x : U; Assume x_in_C0. \nIt holds that (x ∈ finite_union_up_to C 1). \nQed. "
    },
    {
      "type": "text",
      "text": "### Increasing sequences of sets\n\nIt is easy to picture convergence of a sequence of numbers. But how does this work for sets? We would like to use some sense of convergence for sets for example to proving that measures are continuous. A way to do this is to use an increasing sequence of sets. We will now give the definition, and prove some properties. "
    },
    {
      "type": "code",
      "text": "Definition is_increasing_seq_sets (C : (ℕ → (subset U)))\n  : Prop := \n    ∀n : ℕ, (C n) ⊂ C (S n).\n\nLemma increasing_seq_mn : \n     ∀ C : (ℕ → (subset U)), \n      is_increasing_seq_sets C \n        ⇒ (∀m n : ℕ, (m ≤ n)%nat \n          ⇒ C m ⊂ C n).\n\nProof. \nTake C : (ℕ ⇨ subset U). \nAssume C_is_increasing.\nTake m n : ℕ; Assume m_le_n. \ninduction n.\nIt holds that ((m = 0)%nat) (m0).\nWrite goal using ((m = 0)%nat) \n  as (C 0%nat ⊂ C 0%nat).\nIt holds that (C 0%nat ⊂ C 0%nat).\nBy leq_equiv it holds that \n  (((m < (S n))%nat ∨ m = (S n))) (m_l_eq_Sn).\nBecause m_l_eq_Sn either m_l_Sn or m_eq_Sn.\nBy IHn it holds that \n  (C m ⊂ C n) (Cm_subs_Cn). \nBy C_is_increasing it holds that\n  (C n ⊂ C (S n)) (Cn_subs_CSn).\nIt follows that (C m ⊂ C (S n)). \n\nWrite goal using (m = S n) \n  as (C (S n) ⊂ C (S n)). \nIt holds that (C (S n) ⊂ C (S n)). \nQed.   \n"
    },
    {
      "type": "text",
      "text": "In proofs involving increasing sequences of sets, a common argument is that the finite union up to and including a certain set is equal to the set itself. The same still holds if we take the finite union over the sequence `disjoint_seq` instead of the original sequence, which is what we prove next: "
    },
    {
      "type": "code",
      "text": "Lemma FUn_aux_is_Cn : \n  ∀C : (ℕ → (subset U)), is_increasing_seq_sets C\n    ⇒ ∀ n : ℕ, finite_union_up_to (disjoint_seq C) (S n) = C n.\n\nProof. \nTake C : (ℕ ⇨ subset U) . \nAssume C_is_incr_seq.\nDefine D := (disjoint_seq C). \nTake n : ℕ. \nWe prove equality by proving two inclusions. \nTake x : U; Assume x_in_FU. \nChoose n0 such that x_in_Dn0 according to x_in_FU. \nBy x_in_Dn0 it holds that \n  (x ∈ C n0) (x_in_Cn0).\n(*It holds that ((n0 < n)%nat) (n0_l_n). \nBy l_equiv it holds that \n  (n0 = (n - 1)%nat ∨ (n < n - 1)%nat) (n0_eq_l_n1).*) \nBy increasing_seq_mn it holds that \n  (C n0 ⊂ C n) (Cn0_subs_Cn). \nIt follows that (x ∈ C n). \n\nTake x : U; Assume x_in_C.\nDefine aux_prop := (fun (n : ℕ) ↦ (x ∈ C n)). (*n-1?*)\nBy classic it holds that \n  (∀ n, aux_prop n ∨ ¬aux_prop n) (aux_prop_decidable). \nBy dec_inh_nat_subset_has_unique_least_element it holds that\n  (has_unique_least_element le aux_prop) (exists_least_n). \nChoose n1 such that x_in_C_minimal_n according to exists_least_n. \nIt holds that ( aux_prop n1 \n  ∧ ( ∀ n2 : ℕ, aux_prop n2 \n    ⇒ (n1 ≤ n2)%nat)) (aux_n1_and_n1_le_n2).\nBecause aux_n1_and_n1_le_n2 both aux_n1 and n1_le_n2. \nIt holds that (x ∈ D n1) (x_in_Dn1). \nWe claim that ( (n1 < S n)%nat ) (n1_l_n).\nBy x_in_C it holds that (aux_prop n) (aux_n_min_1). \nBy n1_le_n2 it holds that \n  ((n1 ≤ n)%nat) (n1_leq_n_min_1). \nIt holds that \n  ((n1 < S n)%nat). \n  \nIt holds that (∃i : ℕ,  \n  ((i < (S n))%nat ∧ x ∈ (D i))) (exists_i). \nIt follows that (x ∈ finite_union_up_to D (S n)).\nQed."
    }
  ]
}