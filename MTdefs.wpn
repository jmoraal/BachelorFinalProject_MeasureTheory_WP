{
  "exerciseSheet": false,
  "blocks": [
    {
      "type": "text",
      "text": "# Measure theory definitions & notations"
    },
    {
      "type": "code",
      "text": "Require Import Sets.Ensembles.\nRequire Import Sets.Classical_sets.\nRequire Import wplib.Tactics.Tactics.\nRequire Import wplib.Tactics.TacticsContra.\nRequire Import Sets.Powerset.\nRequire Import Coq.Logic.Classical_Pred_Type.\n\nRequire Import wplib.Notations.SetNotations."
    },
    {
      "type": "code",
      "text": "\n"
    },
    {
      "type": "text",
      "text": "Definitions concerning π-systems, λ-systems, σ-algebras and their properties: "
    },
    {
      "type": "code",
      "text": "Definition is_π_system (Π : setOfSubsetsU) \n  : Prop := \n    ∀ A : subsetU, A ∈ Π ⇒ \n      ∀ B : subsetU, B ∈ Π ⇒ \n         (A ∩ B) ∈ Π. \n         \nDefinition Countable_union (A : (ℕ → subsetU) ) \n  : subsetU := \n    ｛ x:U | ∃n : ℕ, x ∈ (A n)｝.\n    \nDefinition finite_union (C : (ℕ ⇨ set)) (n : ℕ) \n  : set := \n    {x : U | (∃ i : ℕ,  (i <= n ∧ x ∈ (C i)))}.\n\nDefinition finite_union_up_to (C : (ℕ ⇨ set)) (n : ℕ) \n  : (set) := \n    {x : U | (∃ i : ℕ,  (i < n ∧ x ∈ (C i)))}.\n(*TODO: only use one of the definitions above? *)\n\nDefinition full_set_in_set (Λ : setOfSubsetsU) \n  : Prop :=\n    Ω ∈ Λ. \n\nDefinition complement_in_set (Λ : setOfSubsetsU) \n  : Prop := \n    ∀A  : subsetU, A ∈ Λ \n      ⇒ (Ω \\ A) ∈ Λ. \n\nDefinition closed_under_disjoint_countable_union (Λ : setOfSubsetsU) \n  : Prop :=\n    ∀C : (ℕ → (subsetU)), \n      (∀ m n : ℕ, m ≠ n ⇒ Disjoint _ (C m) (C n)) \n        ⇒ (∀ n : ℕ, (C n) ∈ Λ) ⇒  (Countable_union C) ∈ Λ.\n\nDefinition closed_under_countable_union (Λ : setOfSubsetsU) \n  : Prop :=  \n    ∀C : (ℕ → (subsetU)), (∀ n : ℕ, (C n) ∈ Λ) \n      ⇒ (Countable_union C) ∈ Λ.\n\nDefinition is_λ_system (Λ : setOfSubsetsU) \n  : Prop :=\n    full_set_in_set Λ ∧ \n    complement_in_set Λ ∧\n    closed_under_disjoint_countable_union Λ. \n\nDefinition λ_system_generated_by (A : setOfSubsetsU) \n  : (setOfSubsetsU) := \n    {B : subsetU | (∀ Λ : setOfSubsetsU, is_λ_system Λ \n       ⇒ (A ⊂ Λ ⇒ B ∈ Λ))}. \n\nDefinition is_σ_algebra (F : setOfSubsetsU) \n  : Prop := \n    full_set_in_set F ∧ \n    complement_in_set F ∧\n    closed_under_countable_union F.\n\nDefinition σ_algebra_generated_by (A : setOfSubsetsU) \n  : (setOfSubsetsU) := \n    ｛B : subsetU | ∀ F : setOfSubsetsU, is_σ_algebra F ⇒ (A ⊂ F ⇒ B ∈ F)｝ . \n\nDefinition restriction (F : setOfSubsetsU) (A : (subsetU)) \n  : (setOfSubsetsU) := \n    ｛C : subsetU | ∃B : subsetU, B ∈ F ⇒ C = A ∩ B｝. "
    },
    {
      "type": "text",
      "text": "Next, notations to make these definitions more useable/readable:"
    },
    {
      "type": "code",
      "text": "Notation \"A is_a_π-system\" := \n  (is_π_system A) (at level 50).\n  \nNotation \"A is_a_λ-system\" := \n  (is_λ_system A) (at level 50). \n\nNotation \"A is_a_σ-algebra\" := \n  (is_σ_algebra A) (at level 50).\n(*TODO: general tactic for the form above? *)\n\nNotation \"λ( A )\" := \n (λ_system_generated_by A) (at level 50).\n \nNotation \"σ( A )\" := \n (σ_algebra_generated_by A) (at level 50)."
    },
    {
      "type": "text",
      "text": "# Hints"
    },
    {
      "type": "code",
      "text": "Hint Resolve Full_intro : measure_theory.  (*nieuwe database measure theory*)\nHint Resolve Intersection_intro : measure_theory. \nHint Resolve Union_introl Union_intror : measure_theory. \nHint Resolve Disjoint_intro : measure_theory. "
    }
  ]
}